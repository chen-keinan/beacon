{
  "benchmark_type": "k8s",
  "categories": [
    {
      "name": "Control Plane Components",
      "sub_category": {
        "name": "Policies",
        "audit_tests": [
          {
            "name": "5.1.1 Ensure that the cluster-admin role is only used where required",
            "description": "The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.",
            "profile_applicability": "Level 1 - Worker Node",
            "audit": [
              "tf=/dev/stdout &&  kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name |grep cluster-admin > tf && awk '{ print $3 }' tf"
            ],
            "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and if they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the clusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]",
            "check_type": "multi_param",
            "impact": "Care should be taken before removing any clusterrolebindings from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to clusterrolebindings with the system: prefix as they are required for the operation of system components.",
            "eval_expr": "'$0' == 'system:masters';",
            "default_value": "By default a single clusterrolebinding called cluster-admin is provided with the system:masters group as its principal.\n",
            "references": [
              "https://kubernetes.io/docs/admin/authorization/rbac/#user-facing-roles"
            ]
          },
          {
            "name": "5.1.2 Minimize access to secrets",
            "description": "The Kubernetes API stores secrets, which may be service account tokens for the Kubernetes API or credentials used by workloads in the cluster. Access to these secrets should be restricted to the smallest possible group of users to reduce the risk of privilege escalation.",
            "profile_applicability": "Level 1 - Worker Node",
            "audit": [
              "tf=/dev/stdout && kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].kind |grep User  > tf && awk '{ print $1 }' tf",
              "kubectl auth can-i get secrets --all-namespaces --as #0",
              "kubectl auth can-i list secrets --all-namespaces --as=#0",
              "kubectl auth can-i watch secrets --all-namespaces --as=#0"
            ],
            "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.",
            "check_type": "multi_param",
            "impact": "Care should be taken not to remove access to secrets to system components which require this for their operation",
            "eval_expr": "('$0' != 'system:kube-controller-manager'; && '$1' == 'yes'; || '$2' == 'yes'; || '$3' == 'yes';) || '$0' == 'system:kube-controller-manager';",
            "default_value": "By default a single clusterrolebinding called cluster-admin is provided with the system:masters group as its principal.\n",
            "references": [
            ]
          }
        ]
      }
    }
  ]
}